
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/03Magda_minibatch.ipynb

import gzip
from pathlib import Path
import torch
import pickle
import torch.nn as nn
import torch.nn.functional as F

def get_mnist():
    data_file = Path('/home/magda/datasets/mnist')/'mnist.pkl.gz'
    with gzip.open(data_file, 'rb') as f:
        (train_x, train_y), (valid_x, valid_y), (test_x, test_y) = pickle.load(f, encoding='latin1')
    train_x, valid_x, test_x, = [
        torch.tensor(x, dtype=torch.float) for x in (train_x, valid_x, test_x)]
    train_y, valid_y, test_y = [torch.tensor(x, dtype=torch.long) for x in (train_y, valid_y, test_y)]
    return train_x, train_y, valid_x, valid_y, test_x, test_y

def normalize(data_for_stats, data_to_norm=None):
    if data_to_norm is None:
        data_to_norm = data_for_stats
    center = data_for_stats.mean()
    scale = data_for_stats.std()
    return (data_to_norm - center) / scale

def get_accuracy(logits, targets):
    preds = logits.argmax(1)
    return (preds==targets).float().mean()