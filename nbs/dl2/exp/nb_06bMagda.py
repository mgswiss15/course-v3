
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/06bMagda_hooks.ipynb

from exp.nb_03Magda import *
from exp.nb_04Magda_corrected import *
from exp.nb_05bMagda import *
from exp.nb_06Magda import *

class WeightsMonitoringCallback(Callback):
    def fit_begin(self):
        self.learner.metrics['weights_mean'] = [[] for _ in self.learner.model.children()]
        self.learner.metrics['weights_std'] = [[] for _ in self.learner.model.children()]
        self.learner.metrics['weights_grad_mean'] = [[] for _ in self.learner.model.children()]
        self.learner.metrics['weights__grad_std'] = [[] for _ in self.learner.model.children()]

    def before_optim_step(self):
        for lidx, layer in enumerate(self.learner.model.children()):
            try:
                weight = layer.weight.detach()
                self.learner.metrics['weights_mean'][lidx].append(weight.mean().item())
                self.learner.metrics['weights_std'][lidx].append(weight.std().item())
                self.learner.metrics['weights_grad_mean'][lidx].append(weight.grad.mean().item())
                self.learner.metrics['weights__grad_std'][lidx].append(weight.grad.std().item())
            except AttributeError:
                pass

class Hook():
    def __init__(self, layer, hook_func):
        self.hook = layer.register_forward_hook(hook_func)

    def __del__(self):
        self.remove()

    def remove(self):
        self.hook.remove()

    @staticmethod
    def forward_stats(self, inputs, outputs):
        if not hasattr(self, 'output_stats'):
            self.forward_stats = {'means': [], 'stds': []}
        self.output_stats['means'].append(outputs.mean().item())
        self.output_stats['stds'].append(outputs.std().item())

class HooksCallback(Callback):
    def fit_begin(self):
        self.hooks = [Hook(x, Hook.forward_stats) for x in self.learner.model.children()]

    def fit_end(self):
        for hook in self.hooks:
            hook.remove()

from IPython.display import display, Javascript
def nb_auto_export():
    display(Javascript("""{
const ip = IPython.notebook
if (ip) {
    ip.save_notebook()
    console.log('a')
    const s = `!python notebook2script.py ${ip.notebook_name}`
    if (ip.kernel) { ip.kernel.execute(s) }
}
}"""))