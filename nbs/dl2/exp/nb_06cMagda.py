
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/06cMagda_hooksrefactor.ipynb

from exp.nb_04Magda_corrected import *
from exp.nb_05bMagda import *
from exp.nb_06Magda import *
from exp.nb_06bMagda import *

def quick_mnist_data():
    train_x, train_y, valid_x, valid_y, test_x, test_y = get_mnist()
    train_x, valid_x, test_x = norm_all(train_x, valid_x, test_x)
    mnist_bunch = DataBunch(train_x, train_y, valid_x, valid_y, 512)
    return mnist_bunch

from torch.nn import init
def init_model_params(model, uniform=False):
    for layer in model.children():
        if hasattr(layer, 'weight'):
            if uniform:
                init.kaiming_uniform_(layer.weight)
            else:
                init.kaiming_normal_(layer.weight)
        if getattr(layer, 'bias', None) is not None:
            init.zeros_(layer.bias)

class Hook():
    def __init__(self, layer, forward=False, backward=False):
        self.forward = forward
        self.backward = backward
        self.hook_forward = layer.register_forward_hook(self.forward_hook) if forward else None
        self.hook_backward = layer.register_forward_hook(self.backward_hook) if backward else None

    def __del__(self):
        self.remove()

    def remove(self):
        if self.forward:
            self.hook_forward.remove()
        if self.backward:
            self.hook_backward.remove()

    @staticmethod
    def forward_hook(self, *args):
        pass

    @staticmethod
    def backward_hook(self, *args):
        pass


class OutputStatsHook(Hook):
    def __init__(self, layer, forward=True, backward=False):
        super(OutputStatsHook, self).__init__(layer, forward, backward)

    @staticmethod
    def forward_hook(self, inputs, outputs):
        if not hasattr(self, 'output_stats'):
            self.output_stats = {'means': [], 'stds': []}
        self.output_stats['means'].append(outputs.mean().item())
        self.output_stats['stds'].append(outputs.std().item())

class HooksCallback(Callback):
    def __init__(self, hookname):
        self.hookname = hookname

    def fit_begin(self):
        self.hooks_forward = [self.hookname(x, self.hookname.forward_hook) for x in self.learner.model.children()]
        self.hooks_backward = [self.hookname(x, self.hookname.backward_hook) for x in self.learner.model.children()]
        self.hooks_forward

    def fit_end(self):
        for hook in self.hooks_forward:
            hook.remove()
        for hook in self.hooks_backward:
            hook.remove()